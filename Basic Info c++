1  Function - Prototype is compulsary in  C++ , except "inline" function .
 
2. Static variables can be access by both static function and non - static function .
            But , static function can access only static variables .

3. Staic variables can be declare inside but , should compulsary initialise outside the class whether of type INT(Book's perspective differ)  .         
            
4. By default class members in C++ is PRIVATE .

5. Except FRIEND function , all functions should declare in PUBLIC mode .

6. Private data of class can be access by public member functions . 
   
7. scanf() and printf() are faster than cin, cout .

8. To achieve the speed of printf() and scanf() for cin and cout
		main(void)
		{
			ios_base::sync_with_stdio(false);
			cin.tie(NULL); 	//or cin.tie(0)
		}

9. Rather than
		#include <iostream>
		#include <vector>
		#include <algorithm>
  simply use
  		#include <bits/stdc++.h>	//this includes all utilities require for competitive programming
  		using namespace std;
  		
10. memset() is used to initialize the whole array to either 0 or -1, other integral value produce unexpected result
		int ary[5];
		memset(ary, 0, sizeof(ary));

11. vector is a type of a list(or dynamic array) like in Python, where if size is unknown during compile time, data is pushed from back, otherwise as usual as array.
		#include <vector>
		#include <iostream>
		using namespace std;

		main(void)	//by default it's int if not specified
		{
			vector<int> vec;
			for(int i=0; i<5; i++)
				vec.push_back(i);
		//vec.begin() Returns an iterator pointing to the first element in the vector
	//vec.end() Returns an iterator pointing to the theoretical element that follows the last element
			for (auto it = vec.begin(); it != vec.end(); it++) 
				cout << *it << " ";
		}

12. The auto keyword is simply asking the compiler to deduce the type of the variable from the initialization.The auto keyword is a simple way to declare a variable that has a complicated type. For example, you can use auto to declare a variable where the initialization expression involves templates, pointers to functions, or pointers to members.